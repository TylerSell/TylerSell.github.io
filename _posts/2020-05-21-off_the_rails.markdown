---
layout: post
title:      "Off the Rails!"
date:       2020-05-21 17:03:04 +0000
permalink:  off_the_rails
---


Okay.  It's that time again....what time you ask......project time!  This time it is the rails project.  This project was one that I thought about for a while and wanted to build something that was useful for me just as the Sinatra project was.  So the last one was a place to store all my family estate plans to make life easier in the event something unfortunate happened to a loved one.  It turned out really well. 

It was styled very well but that one was made easier as I used a CSS framework called Bulma CSS.  With this one I decided I would go with the most popular framework and learn how it worked which is different than Bulma.  I chose to use Bootstrap(yay for some and boo for others).  I know that Bootstrap is polarizing but as I had never used it I decided to try it to see what all the fuss was about.  It is nice especially after you add some of your own styles to it through SASS but there are things that I feel could be better but that is a story for another day.

For this project the idea was a CRM (candidate resource management) system for insurance agents and recruiters.  It is specialized for a specific company but could be easily customized for a different company and thier hiring process.  The app is pretty simple seemingly but has its interesting parts like Single Table Inheritance.  For those that don't know what that is, here is the basic principal of STI.  Basically you have one table to store data and two different models that write to that table.  The models inherit from the table model and the table also automatically gets a `type` column.  The type will be named after the model that writes the data to the database.  In my project this means I have a User model and table.  But I didn't want all users in the same model as I need to have both Agents and Recruiters which are both users but Agents can have many Recruiters and Recruiters can work for many Agents.  I could have done two different tables but all the data is the same thus I went with a STI which when you signup from the Agent page asks all the same information as the Recruiter signup but will send a `type` to the table of `"Agent"`.  Also spliting the models this way let me scope the views better.  There are things that an Agent needs to be able to see but not really a Recruiter.  This way I can control the data more.

I struggled with STI for a few days running the rails console to death testing till I got all the methods that I wanted to work and the data I got back was what I was expecting.  It was a struggle so much that I actually found that it was going to be faster to scrap the original project and completely start from scratch.  But once it worked it was all downhill from there.  It is all working now and the style is better than the Sinatra project even though responsiveness was not what I was expecting.  I know why it has not worked and that may be something I go back to and add that functionality to later on but for the moment it looks great and as expected on anything from an iPad on up which is how it will be used 99% of the time.

This has been a great experience thinking about what to build and then planning from scratch and then building from nothing and trying things that you have not been show specifically yet.  Lets you feel like what it is really like in the real world where the answers are not always easily available to you and you have to write sloppy code. Test it. Break the program. Rewrite. Test. Get closer but different errors. Rewrite yet again. Test.  Get it working and then again rewrite to DRY up the code as much as possible.  Then its time for all the views and styling.  In the end you are left with completed project that you can be proud of and I know that I am.
